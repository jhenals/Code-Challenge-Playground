######Challenge
/*
Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
*/

#Solution: Sliding Window + 







 #----------------TRIAL-AND-ERROR: --------------------------------------------------------------------------------------------------------- 

1st Attempt: ArrayList


import java.util.ArrayList;

class Solution {
    public int lengthOfLongestSubstring(String s) {
        ArrayList<Character> substring = new ArrayList<>();
        if (s.length() <= 0 || s.length() >= 5 * 10e4) {
            System.out.println(s + " must have a valid length");
        } else {
            for (int i = 0; i <= s.length()-1; i++) {
                int j= substring.size()-1;
                char elem = s.charAt(i);
                if ( substring.contains(elem) ){
                    if ( substring.size()!=0 && elem ==substring.get(j) )  {
                         substring.clear();
                         substring.add(s.charAt(i));
                
                    }else{
                        break;
                    }
                } else{
                    substring.add(s.charAt(i));   
                }
            }
        }
        StringBuilder sb = new StringBuilder();

        for (Character c : substring) {
            sb.append(c);
        }
        return sb.length();
    }
}

THis is the first approach that i came up with. I tried using an arrayList of characters because it provides useful methods such as contains, size, add, remove, etc
 which i thought could be very useful. However, it gives errors to some test cases for example in s="cdd". It gave 1 as output while the expected is 2. 
This i think is because after it does line 44, i am expecting it to stop but it jumped to line 49 . I tried to put a "break" at line 45 but it gave me new errors.



2nd Attempt: SLiding window with LinkedList
import java.util.LinkedList;

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int maxLength= 0;
        int newWindowSize=0;
        int tmp;

        LinkedList aux= new LinkedList();
        for (int i=0; i<s.length(); i++){
            char curr= s.charAt(i);
            if( !aux.contains(curr) ){
                aux.add(curr);
                newWindowSize++;
            }else { //contain
                if( newWindowSize >= maxLength ){
                        maxLength = newWindowSize;
                }//inner if
                if (  aux.contains(curr) ){
                    tmp= aux.indexOf(curr);
                    for( int j=0 ; j<tmp; j++) {
                        aux.remove(j);
                        newWindowSize--;
                    }                    
                    aux.add(curr);
                    newWindowSize++;
                }
            }//se non contiene
            if( newWindowSize >= maxLength ){
                maxLength = newWindowSize;
            }
        }//for-loop
        return maxLength;
    
    }//lengthOfLongestSubstring
        
