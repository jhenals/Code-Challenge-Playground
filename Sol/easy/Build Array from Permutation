1920. Build Array from Permutation

Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.
A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

Example 1:

Input: nums = [0,2,1,5,3,4]
Output: [0,1,2,4,5,3]
Explanation: The array ans is built as follows: 
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]
    = [0,1,2,4,5,3]
Example 2:

Input: nums = [5,0,1,2,3,4]
Output: [4,5,0,1,2,3]
Explanation: The array ans is built as follows:
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]
    = [4,5,0,1,2,3]
 

Constraints:
1 <= nums.length <= 1000
0 <= nums[i] < nums.length
The elements in nums are distinct.


----SOLUTION 1 ---------------------------------------------------------------------------------------------------------------------
# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
My first idea to solve this problem is by using the for-loop approach. However, since this approach is using iterative loop, the complexity depends on the number of iterations implemented in the code, which is linear in this case. . This is not the most optimized solution in terms of time complexity but it is straightforward,  most common and  the easiest to understand.

# Approach
<!-- Describe your approach to solving the problem. -->
The goal of the code is to create a new array 'ans' where each element ans[i] is assigned the value 'nums[nums[i]]' for each index i in the input array 'nums'. 

# Code
```
class Solution {
    public int[] buildArray(int[] nums) {
        int[] ans= new int [nums.length];
        for ( int i=0; i<nums.length; i++){
            ans[i]= nums[nums[i]];
        }
        return ans;
    }
}
```

# Complexity
- Time complexity:O(n)
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
The time complexity of this code is O(n), where "n" is the length of the input array nums.
1. I initialize a new integer array ans of the same length as the input array nums. 
This operation takes O(n) time because you i to allocate memory for ans and initialize all its elements to their default values (which is 0 for integers).

2. I then iterate through the nums array using a for loop that runs for n iterations, where n is the length of the input array.

3. Inside the loop, I perform a constant time operation: ans[i] = nums[nums[i]]. 
This involves two array accesses and an assignment, all of which take constant time.

4. Since the most significant factor contributing to the time complexity is the loop that runs for n iterations, the overall time complexity of the code is O(n).

So, the code has a linear time complexity, which means its runtime grows linearly with the size of the input array.


- Space complexity: O(n)
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
The space complexity of this code is O(n) where n is the length of the input array nums.
1. I initialize an auxiliary array ans with the same length as the input array nums.
This means that the required space for ans is directly proportional to the size of nums.

2. Since i dont use other data structures or memory allocations in this code and the variables and operations used constant amount of space, 
 therefore the space complexity is O(n).





-----SOLUTION 2 -------------------------------------------------------------------------------------------------------------------------------




 
