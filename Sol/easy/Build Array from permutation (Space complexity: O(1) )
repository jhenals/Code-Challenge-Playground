#Description:
Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

 

Example 1:

Input: nums = [0,2,1,5,3,4]
Output: [0,1,2,4,5,3]
Explanation: The array ans is built as follows: 
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]
    = [0,1,2,4,5,3]
Example 2:

Input: nums = [5,0,1,2,3,4]
Output: [4,5,0,1,2,3]
Explanation: The array ans is built as follows:
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]
    = [4,5,0,1,2,3]
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] < nums.length
The elements in nums are distinct.
 

Follow-up: Can you solve it without using an extra space (i.e., O(1) memory)?


-------------SOLUTION--------------------------------------------------------------------------------


# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
In order to have a space complexity of O(1), we must solve the problem without using extra space, therefore by performing the array transformation in-place.

# Approach
<!-- Describe your approach to solving the problem. -->
One way to solve this problem is by writing the new values within the original array itself without using data structures. 
In this code, we used two loops to ensure that the values are extracted correctly. 
The first for-loop  serves to encode both the current and new value at each index in the 'nums' array. 
Let us consider this array: nums = [0,2,1,5,3,4]
1. For each index i from 0 to n-1 where n is the lengh of nums (=6), we calculate the current value at index i in a way that avoids overwriting the original value: 
    i=0 -> nums[0]=0
2. Then we calculate the new value that should be stored at index i using nums[nums[i]] % n :
    nums[nums[0]]= nums[0]= 0. 
Now we  take module n to ensure that it fits within the bounds of the array: 
    0 % n = 0 % 6 = 0
3. We scale the new value by n to ensure that it doesnt interfere with the current value at index i: 
    0 * n = 0 * 6 = 0
4. Finally, we add this scaled value back to nums[i]. 
    nums[0] + new value = 0 + 0 = 0 
As a result, nums[i] now contains both the current value and new values encoded within the single integer. 

nums= nums' = [ 0,2,1,5,3,4]

Let's try it with i = 1. 
1. nums[1] = 2
2. nums[nums[i]] = nums[2]= 1
3. nums[nums[i]]%n = 1 % 6 = 1
4. 1 * 6 = 6
5. nums[1] += 6 = 2+6 = 8 

nums= nums' = [ 0,8,1,5,3,4]

i= 2:
1. nums[2]= 1
2. nums[1]= 8= new value
3. new value % 6 = 8 % 6 = 2
4. 2* 6 = 12
5. nums[2] +12 = 1 + 12 = 13

nums= nums' = [ 0,8,13,5,3,4]

i= 3
1. nums[3] = 5
2. nums[5]= 4
3. 4 % 6 = 4
4. 4* 6 = 24
5. nums[3] + 24 = 5 + 24 = 29

nums= nums' = [ 0,8,13,29,3,4]

i=4
1. nums[4]= 3
2. nums[3]=29
3. 29%6= 5
4. 5*6 = 30
5. nums[4] + 30 = 3+30= 33

nums= nums' = [ 0,8,13,29,33,4]

i = 5
1. nums[5]= 4
2. nums[4]= 33
3. 33 % 6 = 3
4. 3* 6 = 6
5. nums[5] + 6= 4+6 = 18

nums= nums' = [ 0,8,13,29,33,18]

Second for-loop: 
The second loop divides each element by n to extract the new values from the encoded integers.

Result of the first for-loop: 
nums= nums' = [ 0,8,13,29,33,10]
If we divide each element by n, we extract the output: 
nums=[0, 1, 2, 4, 5, 3]
which represens the desired result of the first problem. 

# Code
```
//Follow up
class Solution {
    public int[] buildArray(int[] nums) {
        int n= nums.length;
        for ( int i=0; i<n; i++ ){
            nums[i] += (nums[nums[i]] % n) * n;
        }
        for ( int i=0; i<n; i++ ){
            nums[i] /= n;
        }
        return nums;
    }
}
```

# Complexity
- Time complexity:O(n) Linear
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
The code consists of two for-loops, both iterate through the array 'nums' of length n. 
The first loops that encodes the temporary values has time complexity of O(n).
The second loops that decodes the desired result by dividing each element by n has also time complexity of O(n). 
Therefore, the overall time complexity is O(n) + O(n) = O(n)

- Space complexity: O(1) Constant
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
The code uses a constant amount of extra spaces regardless the input size. It doesnt create any additional data structures whose usage depends on the input size.  Therefore the space complexity is O(1).

